/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
* Provider dependency injections
* It uses component entry names defined in the SORCER provider
* as defined by sorcer.core.provider.SorcerProvider.
*
* @author Mike Sobolewski
*/
import java.util.logging.*;
import net.jini.jrmp.*;
import net.jini.jeri.*;
import net.jini.jeri.tcp.*;
import sorcer.core.*;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.*;
import sorcer.core.provider.*;
import sorcer.provider.sqrt.ui.*;
import sorcer.provider.sqrt.*;
import sorcer.provider.sqrt.impl.*;

sorcer.core.provider.ServiceProvider {
        /* service provider deployment properties */
		name = "Sqrt";
		description = "Sqrt - bean provider";
		location = "MSTC/AFRL";
		properties="sqrt-prv.properties";
		publishedInterfaces = new Class[] { sorcer.provider.sqrt.Sqrt.class };
		
		// add service UI
		entries = new Entry[] { sorcer.provider.sqrt.ui.SqrtUI.getUIDescriptor() };
		
		//discoveryEnabled = false;
		spaceEnabled = true;
		//workerTransactional = true;
		//workerCount = 100;
		
		// remote logging
		remoteLogging=true;
		remoteLoggerManagerName="Logger";
		remoteLoggerLevel=Level.FINE;
		remoteLoggerName="remote.sorcer.provider.sqrt.Sqrt";

		// local private logging available via by RemoteLogger
		// remoteContextLogging = true;
		// remoteProviderLogging = true;
		
		// service beans	
		beanClasses = new Class[] { sorcer.provider.sqrt.impl.SqrtImpl.class };
		
		iconName="sorcer.jpg";
}

/*
 * Configuration for Signature Based Provisioning
 */
sorcer.core.exertion.deployment {
    interfaces = new String[]{"sorcer.provider.sqrt.Sqrt"};

    codebaseJars = new String[]{"org/sorcer/sqrt/${sorcer.version}/sqrt-${sorcer.version}-dl.jar",
                                "org/sorcer/sqrt/${sorcer.version}/sqrt-${sorcer.version}-ui.jar",
                                "sorcer-dl-${sorcer.version}.jar",
                                "jsk-dl-${river.version}.jar"};

    implJars = new String[]{"org/sorcer/sqrt/${sorcer.version}/sqrt-${sorcer.version}-prv.jar",
                            "org/sorcer/sqrt/${sorcer.version}/sqrt-${sorcer.version}-ui.jar"};
}


	



